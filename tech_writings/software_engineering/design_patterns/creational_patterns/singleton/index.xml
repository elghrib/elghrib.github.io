<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Singleton on mstva</title><link>https://mstva.github.io/tech_writings/software_engineering/design_patterns/creational_patterns/singleton/</link><description>Recent content in Singleton on mstva</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 27 Feb 2023 00:50:27 +0200</lastBuildDate><atom:link href="https://mstva.github.io/tech_writings/software_engineering/design_patterns/creational_patterns/singleton/index.xml" rel="self" type="application/rss+xml"/><item><title>How to implement a cache manager with the singleton pattern using Python</title><link>https://mstva.github.io/cache_manager_with_singleton_pattern/</link><pubDate>Mon, 27 Feb 2023 17:29:58 +0200</pubDate><guid>https://mstva.github.io/cache_manager_with_singleton_pattern/</guid><description>Introduction In this article we will build a cache manager that stores frequently used data in memory using the Singleton pattern where the Singleton instance can ensure that the data is accessed efficiently and that memory usage is optimized.
UML Diagram of the Cache Manager Code Implementation The cache manager is very simple approach, we need to save data with predefined key and then use this key to retrieve this data and this approach could be achieved through the set and get methods as shown below, we will also use the singleton pattern that require a static method and private constructor, so we could get only one instance from the class every time we call it</description></item><item><title>How to implement a logging system with the singleton pattern using Python</title><link>https://mstva.github.io/logging_system_with_singleton_pattern/</link><pubDate>Mon, 27 Feb 2023 00:51:01 +0200</pubDate><guid>https://mstva.github.io/logging_system_with_singleton_pattern/</guid><description>Introduction Logging is an important aspect of software development, as it allows developers to track what their applications are doing and to identify and fix issues as they arise. One design pattern that can be useful in implementing a logging system is the Singleton pattern, which ensures that there is only one instance of a class in the system.
UML Diagram of the Logging System Code Implementation Implementing a logging system with the Singleton pattern is to define a Logger class that will handle all the logging functionality.</description></item></channel></rss>