<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Factory Method on mstva</title><link>https://mstva.github.io/tech_writings/software_engineering/design_patterns/creational_patterns/factory_method/</link><description>Recent content in Factory Method on mstva</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 28 Feb 2023 17:11:19 +0200</lastBuildDate><atom:link href="https://mstva.github.io/tech_writings/software_engineering/design_patterns/creational_patterns/factory_method/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a Document Converter with the Factory Method pattern using Python</title><link>https://mstva.github.io/document_converter_with_factory_method_pattern_using_python/</link><pubDate>Tue, 28 Feb 2023 17:12:04 +0200</pubDate><guid>https://mstva.github.io/document_converter_with_factory_method_pattern_using_python/</guid><description>Introduction I am implementing real-world projects using the design patterns to see how we could benefit from them when building our own software, in this article I am building a Document Converter using the Factory Method design pattern, so let&amp;rsquo;s get started!
What is the Factory Method pattern? Explaining the pattern is out of scope of this article, and you could take a look at the references to know more about this pattern, how we use it and the UML diagram for it.</description></item></channel></rss>