<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Technical Writings on mustafaelghrib</title><link>https://mustafaelghrib.github.io/tech_writings/</link><description>Recent content in Technical Writings on mustafaelghrib</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 16 Jun 2023 10:56:05 +0300</lastBuildDate><atom:link href="https://mustafaelghrib.github.io/tech_writings/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Build a Cloud Infrastructure</title><link>https://mustafaelghrib.github.io/how_to_build_cloud_infrastructure/</link><pubDate>Fri, 16 Jun 2023 10:56:05 +0300</pubDate><guid>https://mustafaelghrib.github.io/how_to_build_cloud_infrastructure/</guid><description>Introduction With the age of cloud computing and public clouds like AWS, GCP, and Azure, building a cloud infrastructure has become a regular practice in software development. However, doing it correctly with defined steps is what will enable you to produce high-quality and efficient work. Today, I am writing about those steps that help us build an efficient cloud infrastructure.
Table of Contents What is Cloud Infrastructure? Steps of Building a Cloud Infrastructure Define Choose Plan Design Implement Deploy Monitor Maintain What is Next in This Series?</description></item><item><title>إزاي هندسة البرمجيات حسنت طريقة تفكيري</title><link>https://mustafaelghrib.github.io/how_did_software_engineering_improve_my_way_of_thinking/</link><pubDate>Fri, 09 Jun 2023 12:58:10 +0300</pubDate><guid>https://mustafaelghrib.github.io/how_did_software_engineering_improve_my_way_of_thinking/</guid><description>مقدمة بعد خمس سنين في الكلية وأكتر من سنتين في مجال هندسة البرمجيات، الشخص اللي كنته في الأول غير الشخص اللي أنا عليه النهاردة، عن طريق إكتشاف إزاي طريقة تفيكري أتحسنت، وده نبع من خلال عملي كمهندس برمجيات. النهاردة قررت أكتب عن طرق التفكير اللي اكتسبتها وإزاي آثرت علي في الشغل والحياة.
المحتويات قبل كده؟ طب دلوقتي؟ طرق تفكيري بين الشغل والحياة ترتيب الأولويات التركيز على المهم وضع احتمالات للأسوأ ومحاولة تجنبه تحويل المواقف السيئة إلى شئ إيجابي حل المشاكل الكبيرة عن طريق تكسيرها تجنب خداعك بالكلام عن طريق التفيكر المنطقي تجريد الأشياء إلى حالتها الأصلي فلسفة السؤال التكبير والتصغير الشك واليقين الرأي والرأي الآخر بعد كده؟ الملخص قبل كده؟ يمكن قبل كده كنت شخص منظم شوية وده فادني في المذاكرة في الثانوية، بس في حجات جديدة مكنتش أكتشتفتها قبل كده وده طبيعي لإني مكنتش اتعرضت لمواقف تعلمني، بس حجات ذي ترتيب الأولويات، التركيز على المهم، وضع احتمالات للأسوأ ومحاولة تجنبه، تحويل المواقف السيئة إلي شئ إيجابي، حل المشاكل الكبيرة عن طريق تكسيرها، وتجنب خداعك بالكلام عن طريق التفيكر المنطقي .</description></item><item><title>إزاي أتعلمت ال DevOps وال Cloud</title><link>https://mustafaelghrib.github.io/how_did_i_learn_devops_and_cloud/</link><pubDate>Fri, 12 May 2023 19:18:02 +0300</pubDate><guid>https://mustafaelghrib.github.io/how_did_i_learn_devops_and_cloud/</guid><description>مقدمة في المقال ده حبيت أتكلم عن أزاي أتعلمت ال DevOps وال Cloud وال Microservices مع نفسي ك self-study و أزاي أنت كمان تقدر تتعلمها؟ خصوصا إنها خدت مني وقت عشان أتعلمها لوحدي وإيه المصادر اللي ساعدتني وإيه المشاريع اللي عملتها خلال الرحلة دي.
ليه أتعلمتهم؟ أول حاجة محتاجين نعرفها ليه أنا احتجت أتعلم الحجات دي أو إيه الدافع اللي خلاني أتعلمهم؟
أنا backend software engineer يدوب كنت بعرف أعمل backend APIs كان كل حاجة بعملها متعلقة بال code و أزاي أضيف feature أو أصلح bug ويوم ما أجي أعمل deployment كنت بجيب أي Ubuntu Server وباستخدام Nginx وبعمل الخطوات manually وخلاص على كده.</description></item><item><title>Methods of Deployment with Examples</title><link>https://mustafaelghrib.github.io/methods_of_deployment_with_examples/</link><pubDate>Fri, 12 May 2023 10:43:29 +0300</pubDate><guid>https://mustafaelghrib.github.io/methods_of_deployment_with_examples/</guid><description>Introduction Deployment is an important step in the software development lifecycle, as it involves shipping our code to the outside world. Making the process smooth, seamless, and error-free is crucial for tech people. During my journey as a Software Engineer, I&amp;rsquo;ve worked on various deployment methods - from the basic to the most modern and advanced ones. Today, I am writing about these different ways of deployment and how to implement them.</description></item><item><title>Terraform and Microservices</title><link>https://mustafaelghrib.github.io/terraform_and_microservices/</link><pubDate>Thu, 11 May 2023 10:41:47 +0300</pubDate><guid>https://mustafaelghrib.github.io/terraform_and_microservices/</guid><description>Introduction When I was improving my skills and learning about Microservices, Cloud, and DevOps, I faced a problem when migrating from Monolithic Architecture to Microservices Architecture, specifically in the part where I had to provision the cloud infrastructure with Terraform. The issue was how to write the cloud infrastructure successfully for each service in our microservices program without duplicating code and ensuring that each service&amp;rsquo;s infrastructure was standalone, without affecting other services.</description></item><item><title>Document Converter with Factory Method Pattern using Python</title><link>https://mustafaelghrib.github.io/document_converter_with_factory_method_pattern_using_python/</link><pubDate>Tue, 28 Feb 2023 17:12:04 +0200</pubDate><guid>https://mustafaelghrib.github.io/document_converter_with_factory_method_pattern_using_python/</guid><description>Introduction I am implementing real-world projects using the design patterns to see how we could benefit from them when building our own software, in this article I am building a Document Converter using the Factory Method design pattern, so let&amp;rsquo;s get started!
What is the Factory Method pattern? Explaining the pattern is out of scope of this article, and you could take a look at the references to know more about this pattern, how we use it and the UML diagram for it.</description></item><item><title>Cache Manager with Singleton Pattern using Python</title><link>https://mustafaelghrib.github.io/cache_manager_with_singleton_pattern/</link><pubDate>Mon, 27 Feb 2023 17:29:58 +0200</pubDate><guid>https://mustafaelghrib.github.io/cache_manager_with_singleton_pattern/</guid><description>Introduction In this article we will build a cache manager that stores frequently used data in memory using the Singleton pattern where the Singleton instance can ensure that the data is accessed efficiently and that memory usage is optimized.
UML Diagram of the Cache Manager Code Implementation The cache manager is very simple approach, we need to save data with predefined key and then use this key to retrieve this data and this approach could be achieved through the set and get methods as shown below, we will also use the singleton pattern that require a static method and private constructor, so we could get only one instance from the class every time we call it</description></item><item><title>Logging System with Singleton Pattern using Python</title><link>https://mustafaelghrib.github.io/logging_system_with_singleton_pattern/</link><pubDate>Mon, 27 Feb 2023 00:51:01 +0200</pubDate><guid>https://mustafaelghrib.github.io/logging_system_with_singleton_pattern/</guid><description>Introduction Logging is an important aspect of software development, as it allows developers to track what their applications are doing and to identify and fix issues as they arise. One design pattern that can be useful in implementing a logging system is the Singleton pattern, which ensures that there is only one instance of a class in the system.
UML Diagram of the Logging System Code Implementation Implementing a logging system with the Singleton pattern is to define a Logger class that will handle all the logging functionality.</description></item></channel></rss>